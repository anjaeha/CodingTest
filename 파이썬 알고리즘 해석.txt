시간제한
N의 범위가 500 :        O(N**3)인 알고리즘으로 설계
N의 범위가 2,000 :      O(N**2)인 알고리즘으로 설계
N의 범위가 100,000 :    O(NlogN)인 알고리즘으로 설계
N의 범위가 10,000,000 : O(N)인 알고리즘으로 설계

코테 유형 - 그리디, 구현, DFS/BFS가 80%정도를 차지함.

코딩테스트 할때 배열을 미리 만들어놓는게 좀 빠른거같음.
[0] * 배열의 길이 처럼?

--------------------------------------

from collections import Counter

Counter('hello world') 
Counter({'l': 3, 'o': 2, 'h': 1, 'e': 1, ' ': 1, 'w': 1, 'r': 1, 'd': 1})

글자수를 세주는 카운터

--------------------------

동일한 개수로 이루어진 자료형을 묶어주는 내장함수인 zip

Number = [1,2,3,4]
Name = ['hong','gil','dong','nim']

Number_Name = list(zip(Number,name))

print(Number_Name)

결과 : [(1 ,'hong'), (2 ,'gil'), (3 ,'dong'), (4 ,'nim')]


--------------------------------
특정 문자열 찾기

find.('찾을문자', 시작위치)
있으면 위치 반환, 없으면 -1 반환

startswith('시작하는 문자', 시작지점)
문자열이 특정문자로 시작하는지 여부를 알려줌

endswith('끝나는문자', 문자열의 시작, 문자열의 끝)
문자열이 특정문자로 끝나는지 여부를 알려줌.

--------------------------------
리스트에 요소와 인덱스를 같이 얻고 싶으면
for 문에 변수 2개 입력하는것도 가능함.

listdata = ['Alice', 'Bob', 'Charlie']

for i, name in enumerate(listdata):
    print(i, name)

리스트의 경우 enumerate 함수를 사용해야함.
순서와 리스트의 값을 전달하는 기능.


--------------------------------

순열과 조합에서 많이 쓰는 함수

from itertools 라이브러리에서
    import permutations
        - eg) 리스트 ['A', 'B', 'C'] 에서 3개를 뽑아 나열 하는 모든 경우의 수...
        - result = list(permutations(data, 3))

    import combinations
        - eg) 리스트 ['A', 'B', 'C'] 에서 2개를 뽑는 모든 조합 구하기 ...
        - result = list(combinations(data, 2))

        - eg) 중복해서 2개뽑기
        - result = list(product(data, repeat = 2))

        import combinations_with_replacement
        - eg) data[0] <= data[1]으로 2개 뽑기
        - result = list(combinations_with_replacement(data, 2))

--------------------------------

이진 탐색
from bisect 라이브러리에서
    import bisect_left, bisect_right
    a = [1,2,4,4,5]
    x = 4
    print(bisect_left(a, x)) = 2
    print(bisect_right(a,x)) = 4

--------------------------------

수학적인 기능
import math
    - math.factorial    팩토리얼 출력
    - math.sqrt         제곱근 반환
    - math.gcd          최대공약수
    - math.pi           파이값



dx = [0, 0, -1, 1]
dy = [-1, 1, 0, 0]
move = ['L', 'R', 'U', 'D']
