'''
삽입 정렬
2번째 원소부터 시작하여 그 앞의 원소들과 비교하여 삽입할 위치를 지정한 후, 원소를 뒤로 옮기고 지정된 자리에 자료를 삽입하여 정렬하는 알고리즘

정렬 방법
    1. temp에 2번째 값을 저장함
    2. temp와 이전에 있는 원소들과 값을 비교하여 삽입
    3. 2번을 삽입하고 나서 3번을 같은 방식으로 삽입..
    4. 계속 반복하여 정렬을 끝냄

시간복잡도는 모든 원소들에 접근하여, 모든 원소를 비교하여야 하기 때문에 O(N ** 2)의 시간복잡도를 가진다.
또한 주어진 배열 안에서 교환을 통해 정렬하기 때문에 O(N)의 공간복잡도를 가진다.
알고리즘이 단순하며, 정렬이 어느정도 되어있으면 효율적이다. 또한 선택정렬이나 버블정렬에 비해 상대적으로 빠르다
하지만 O(N ** 2)의 시간복잡도를 가지기 때문에, 매우 비효율적이며 배열의 길이가 길어질 수록 더 안좋다
'''

def insertion_sort(arr):
    for point in range(1, len(arr)):
        for i in range(0, point):
            if arr[point] < arr[i]:
                arr[i], arr[point] = arr[point], arr[i]

arr = [7, 4, 5, 1, 3]
insertion_sort(arr)
print(arr)